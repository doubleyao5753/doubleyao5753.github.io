<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>总结ES6常用语法</title>
      <link href="/2019/08/18/zong-jie-es6-chang-yong-yu-fa/"/>
      <url>/2019/08/18/zong-jie-es6-chang-yong-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>ES6 是什么，就不赘述了。</p><p>如果你也跟当下的我一样，有一些 JavaScript 基础，想在工作中提高开发的效率和优化简化代码，但暂时又没有充分的时间系统的学习 ES6，那么此文就很适合你啦。或许大家都知道，只要基础够扎实，跟着阮一峰大佬的名著<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">《ES6 标准入门》</a>走一遍敲敲代码，学好并应用以来是完全不是事儿的。我们只是暂时性的尝尝鲜，亦或是学过了记不住，平常用的时候模糊了，拿来翻一翻也是再好不过的。</p><h4 id="快速搭建-ES6-环境"><a href="#快速搭建-ES6-环境" class="headerlink" title="快速搭建 ES6 环境"></a>快速搭建 ES6 环境</h4><p>现如今大多数浏览器并不认识 ES6 语法，所以我们需要一些打包编译工具例如：<a href="https://www.webpackjs.com/" target="_blank" rel="noopener">webpack</a>、<a href="https://www.babeljs.cn/" target="_blank" rel="noopener">Babel</a>、<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">gulp</a> 等等。至于具体环境的搭建，可以参考这位仁兄的个人博客，非常详细，致敬！</p><p><a href="https://www.cnblogs.com/zhouyangla/p/7076292.html" target="_blank" rel="noopener">最贴心的 ES6 环境搭建</a></p><p>如果你想对比编译前和编译后的代码，建议在 <a href="https://babeljs.io/repl/" target="_blank" rel="noopener">Babel 官方在线实时编译器</a>中编写。</p><h4 id="ES6-语法：常用的真的不多"><a href="#ES6-语法：常用的真的不多" class="headerlink" title="ES6 语法：常用的真的不多"></a>ES6 语法：常用的真的不多</h4><p>无论是 ES6 还是 English，学习任何一门语言，首要的在其语言的规则和规律 —— 语法。</p><p>别看 ES6 语法书那么厚一本，文档目录那么长一大串，真正用在刀刃上的不过十分之一。用取经取过来的话说：下面提到的语法可能也就是 es6 新特性的 10%-20%，但是开发上占了 80%左右的。所以只要我们暂时弄清楚这部分，挑最核心最实用的学习，便是用最少的时间成本获取最优的价值收益。</p><h5 id="1-变量声明：let-const"><a href="#1-变量声明：let-const" class="headerlink" title="1. 变量声明：let / const"></a>1. 变量声明：let / const</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// No.1 块级作用域</span><span class="token comment" spellcheck="true">// 用var声明的变量，可以全局使用或者在函数中的作用域链中生效</span><span class="token comment" spellcheck="true">// 用let声明的变量，只能在let命令所在的 { 代码块 } 内生效</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// --> 0</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// --> 1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// --> 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// --> Uncaught ReferenceError: b is not defined 意外的引用错误</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ==>  if条件语句与for循环中用let替代var (常用)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// --> 5</span><span class="token comment" spellcheck="true">// --> 内部定时器输出 5个5</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// --> Uncaught ReferenceError: i is not defined</span><span class="token comment" spellcheck="true">// --> 内部定时器输出 0 1 2 3 4</span></code></pre><p>首先需要清楚，for 循环的小括号内分为三部分：一是变量的声明；二是循环的退出条件；三是每次循环后变量要执行的操作。</p><ul><li><code>var</code> 外部输出：在循环的过程中，变量 i 只会在第一次循环时被声明，在后续的变量操作以及退出循环，始终都是用的那个被声明了一次的唯一变量 i , 并且外部可以拿到里面用 var 声明的 i ，因此最后打印退出时的结果 5</li><li><code>let</code> 外部输出：在循环的过程中，每一次循环 let 都会创建一个块级作用域并声明变量 i ，也就是说<strong>有多少个循环就有多少个块级作用域和变量 i</strong> ，每次循环，变量 i 都会记住上次循环的结果并赋值给下一个循环，因此内部有 0 到 4 五个变量和对应的块级作用域，但是外部永远拿不到，打印 <code>引用错误</code></li><li>内部的定时器输出：典型的 JavaScript 执行机制知识点，参考 <a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a> ，你会发现，无论用<code>var</code>还是<code>let</code>，浏览器都会率先打印出外部的<code>console.log</code>，因为定时器里面用的是回调函数，是异步执行的，并不会按照代码顺序等待代码块内部执行完毕后才执行外部的输出，这里将它牵扯进来，是为了更好地理解<code>let</code>在循环内部创建了五个变量且分别输出不同的数；而<code>var</code>永远都是那一个变量在被不断的被下一次循环所替代直到退出</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// No.2 变量提升与暂时性死区</span><span class="token comment" spellcheck="true">// var: 变量提升现象，在创建时就已被初始化，并且赋值为undefined;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出undefined</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// let：也有变量提升，但在创建时不会被初始化，不会赋值为undefined，直到声明语句执行的时候才被初始化</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -->报错ReferenceError</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> someconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>some<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -->undefined</span></code></pre><ul><li>初始化的时候如果使用 let 声明的变量没有赋值，则会默认赋值为<code>undefined</code></li><li>使用<code>let/const</code>时，变量创建到初始化之间的片段就叫<strong>暂时性死区</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token comment" spellcheck="true">// -->ReferenceError</span>  <span class="token keyword">let</span> a  <span class="token keyword">let</span> a <span class="token comment" spellcheck="true">// -->报错</span><span class="token punctuation">}</span></code></pre><ul><li>如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，<strong>从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，都会报错。</strong></li><li><code>let / const</code>不允许在相同作用域内，重复声明同一个变量</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// No.3 const 常量</span><span class="token comment" spellcheck="true">// 使用const，就必须赋值</span><span class="token keyword">const</span> a<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// --> SyntaxError 无法编译，报语法错误</span><span class="token comment" spellcheck="true">// const 定义的叫做只读常量，禁止被重新赋值</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>a <span class="token operator">=</span> <span class="token number">2</span>         <span class="token comment" spellcheck="true">// --> SyntaxError: "a" is read-only</span><span class="token comment" spellcheck="true">// const声明的是一个引用类型时，不能改变它指向的内存地址</span><span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token punctuation">{</span>    one<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>mouse<span class="token punctuation">.</span>one <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// --> 改变原来所指的对象 完全OK</span>mouse <span class="token operator">=</span> <span class="token punctuation">{</span>    two<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// --> 直接使其指针指向另一个内存地址 SyntaxError</span></code></pre><ul><li>使用 const，就必须赋值</li><li>const 定义只读常量，禁止被重新赋值</li><li>const 声明的是一个引用类型时，不能改变它指向的内存地址</li></ul><h5 id="2-箭头函数"><a href="#2-箭头函数" class="headerlink" title="2. 箭头函数"></a>2. 箭头函数</h5><p>ES6 中对于函数最常用的扩展 —— 箭头函数 ( =&gt; )</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> oneFunction <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> a <span class="token comment" spellcheck="true">// ES6</span><span class="token comment" spellcheck="true">// 编译后</span><span class="token keyword">var</span> oneFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">oneFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  a <span class="token operator">+</span>  <span class="token function">b</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// ES6</span>    <span class="token comment" spellcheck="true">// 编译后</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">}</span>  <span class="token punctuation">)</span></code></pre><p>箭头之前是函数的参数，如果函数没有参数，则用一个空的圆括号代替；如果有多个函数，则将各参数写在圆括号内用逗号分隔。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> some <span class="token operator">=</span> m <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  m <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">7</span>  <span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token keyword">return</span> m <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 弹框35，打印40</span></code></pre><p>箭头之后是函数的执行体，若省略大括号，则直接返回所写语句；若执行语句多于一条，则需要使用大括号将其括起来，括号中若有返回值则需要使用 return 关键字；若箭头函数直接返回一个对象，使得对象括号与函数括号冲突，则必须在对象外面加上圆括号。</p><p><strong>注意事项：</strong></p><ol><li><strong>函数体内的 this 对象指向定义时所在的对象，而不是调用时所在的对象。</strong></li><li>箭头函数正因为没有自己的 this，所以不可当做构造函数，不能使用 new 命令</li><li>没有 arguments 对象，如果要用则使用<code>剩余运算符</code>代替</li></ol><p>箭头函数不仅仅只是为了简化代码而生。在 ES5 中，对于 this 的指向，我们刻骨铭心：<strong>this 永远永远指向最后调用它的那个对象。</strong>由此也带来许多不便，箭头函数便是对症下的药。</p><blockquote><p>引用警句：箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 报错为 undefined</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'LiNa'</span><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'WangEr'</span><span class="token punctuation">,</span>  f1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  f2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// WangEr</span>a<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// WangEr</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// LiNa</span><span class="token comment" spellcheck="true">// 先后打印 --> WangEr LiNa WangEr</span></code></pre><p><code>a.f1()</code>： 对于对象中普通的方法函数，this 指向方法所在的对象</p><p><code>a.f2()</code>： 对于方法函数中定时器中的回调箭头函数，定时器中的回调函数属于全局异步函数，this 指向 Window，这里本应该打印<code>LiNa</code>；但是在这里使用了箭头函数后，this 指向最近一层非箭头函数的 this，因此打印<code>WangEr</code></p><p><strong>建议：不要把一个对象的方法函数用作箭头函数！</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>  n<span class="token punctuation">:</span> <span class="token string">'5753'</span><span class="token punctuation">,</span>  arrow<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  common<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>p<span class="token punctuation">.</span><span class="token function">arrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错Cannot read property 'n' of undefined</span>p<span class="token punctuation">.</span><span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5753</span></code></pre><p>一旦方法函数使用了箭头函数，那么这个方法中的所有 this 都不再指向当前对象，而是往上走，这里指向了 Window。</p><h5 id="3-模板字符串"><a href="#3-模板字符串" class="headerlink" title="3. 模板字符串"></a>3. 模板字符串</h5><h5 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4. 解构赋值"></a>4. 解构赋值</h5><h5 id="5-剩余-扩展运算符"><a href="#5-剩余-扩展运算符" class="headerlink" title="5. 剩余/ 扩展运算符"></a>5. 剩余/ 扩展运算符</h5><h5 id="6-简写对象属性-方法"><a href="#6-简写对象属性-方法" class="headerlink" title="6. 简写对象属性/方法"></a>6. 简写对象属性/方法</h5><h5 id="7-Promise"><a href="#7-Promise" class="headerlink" title="7. Promise"></a>7. Promise</h5><h5 id="8-Module"><a href="#8-Module" class="headerlink" title="8. Module"></a>8. Module</h5><p><a href="https://juejin.im/post/5c6234f16fb9a049a81fcca5" target="_blank" rel="noopener">掘金一万字的 ES6 语法</a></p><p><a href="https://juejin.im/post/5a08e5c55188252abc5dd96f#heading-8" target="_blank" rel="noopener">掘金 ES6 常用 API</a></p><p><a href="https://segmentfault.com/a/1190000014824675#articleHeader7" target="_blank" rel="noopener">思否常用语法</a></p><p><a href="https://juejin.im/entry/58f21df95c497d006c87469e" target="_blank" rel="noopener">掘金 30 分钟搞定 ES6</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get Start My Hexo Blogs Way</title>
      <link href="/2019/08/14/first-blog/"/>
      <url>/2019/08/14/first-blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这第一篇具有划时代意义的文章，单纯写一写我这即将踏上创作旅程的澎湃之心。</p></blockquote><p>自开始学习前端的第一天起，无论是 Google 还是百度，所领略到的大多技术文章都来自<code>CSDN</code>、<code>掘金</code>、<code>思否</code>、<code>简书</code>。对，在此特别安利一下<strong>掘金——我的知识朋友圈</strong>。无可否认这些开发者社区在无数场景替我解决了难题，亦或是给予我灵感。也曾不止一次的期待像他们那样，在这些平台笔耕不辍，既内化了知识，又帮助了他人。</p><p>但我还是希望拥有我自己的个人站点，用我的手艺，我的一生，打造我的作品，我的一片天。</p><p><strong>目的不是为了流量和人气，而是内省和学习。</strong></p><p>我知道持续做好自己喜欢的事，该来的也许会迟到，但绝不会缺席。</p><p>如果读者有幸能来到我的站点，可以给你一些帮助，解决某个问题，不用客气，那是我的运气。</p><h3 id="致敬"><a href="#致敬" class="headerlink" title="致敬"></a>致敬</h3><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 官方教程</a></li><li><a href="https://github.com/esappear/hexo-theme-clover" target="_blank" rel="noopener">UI 设计师 Clover 的主题作品</a></li><li><a href="https://chars.tech/blog/build-blog-by-hexo/" target="_blank" rel="noopener">手把手教 GitHub + Hexo 搭建博客</a></li><li><a href="http://dxjia.cn/2016/01/27/hexo-write-everywhere/" target="_blank" rel="noopener">用两个分支写博客</a></li></ul><h3 id="搭建概要"><a href="#搭建概要" class="headerlink" title="搭建概要"></a>搭建概要</h3><p>如果你也想要搭建一个这样的博客，完全可以立即行动以来，不要畏惧，一行代码都不用写。</p><h4 id="需要准备"><a href="#需要准备" class="headerlink" title="#需要准备"></a>#需要准备</h4><p>安装<code>Node.js</code>（附带安装<code>npm</code>）</p><p>基本的<code>html</code>、<code>css</code>、<code>JavaScript</code>知识</p><p><code>GitHub</code>账号</p><p>基本的几条<code>Git</code>命令或者相关工具</p><h4 id="开始搭建"><a href="#开始搭建" class="headerlink" title="#开始搭建"></a>#开始搭建</h4><ol><li><p>将<code>Node.js</code>环境安装到本地计算机，去官网下载一直下一步即可</p></li><li><p>将<code>Git</code>工具安装到本地，Windows 安装 git bash</p></li><li><p>进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 官网</a>，了解并读文档，读取按照步骤</p></li><li><p>在命令行通过此命令安装 Hexo</p><p><code>npm install hexo-cli -g</code></p></li><li><p>初始化博客项目目录，搭建初始结构</p><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><pre><code>-- 初始博客目录结构.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre></li><li><p>在 <code>_config.yml</code>中配置你特有的参数，官网文档很详细</p></li><li><p>本地预览</p><pre><code>$ hexo server// 浏览器打开localhost:4000即可预览</code></pre></li></ol><h4 id="主题替换"><a href="#主题替换" class="headerlink" title="#主题替换"></a>#主题替换</h4><p>不用说，Hexo 默认的主题没人愿意用，除非你只关注于文章的内容，又或者真的是想着<code>别人有的我也要有</code>。</p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo 官网</a>有几百个开源的主题供你尽情挑选，看到喜欢的，就去里面的 GitHub 仓库下载下来，添加到博客目录下的<code>themes</code>文件夹下，再到配置文件里面将主题名字替换为新的主题名字即可。</p><p>除了官网，GitHub 上还有更多私人定制好的开源主题，你只需要 Google 一下。</p><p>每个主题都是一个小项目，是一个静态网站的模板，同样几乎都有功能介绍、使用文档，以及 demo 演示。只要文章不变，网站的样式可以根据主题一键更换，可以说是非常的友好啦。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="#常用命令"></a>#常用命令</h4><pre class=" language-bash"><code class="language-bash">常用命令：hexo init                     <span class="token comment" spellcheck="true">#初始化一个目录</span>hexo new <span class="token string">"postName"</span>         <span class="token comment" spellcheck="true">#新建文章</span>hexo new page <span class="token string">"pageName"</span>     <span class="token comment" spellcheck="true">#新建页面</span>hexo generate                 <span class="token comment" spellcheck="true">#生成网页，可以在 public 目录查看整个网站的文件</span>hexo server                 <span class="token comment" spellcheck="true">#本地预览，'Ctrl+C'关闭</span>hexo deploy                 <span class="token comment" spellcheck="true">#部署.deploy目录</span>hexo clean                     <span class="token comment" spellcheck="true">#清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹</span>简写：hexo n <span class="token operator">==</span> hexo newhexo g <span class="token operator">==</span> hexo generatehexo s <span class="token operator">==</span> hexo serverhexo d <span class="token operator">==</span> hexo deploy</code></pre><h4 id="日常管理"><a href="#日常管理" class="headerlink" title="#日常管理"></a>#日常管理</h4><p><strong>强烈建议：</strong><a href="http://dxjia.cn/2016/01/27/hexo-write-everywhere/" target="_blank" rel="noopener">用两个分支写博客</a></p><p>将部署上线的版本放在 GitHub 仓库下的<code>master</code>分支下，将 hexo 写作配置环境放在<code>hexo</code>分支下。</p><p>在项目的配置文件中配置部署参数：</p><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://github.com/dxjia/dxjia.github.io.git  branch: master</code></pre><p>日常本地 hexo 分支，这样每次部署时，自动更新到 master 分支下，而不会对 hexo 分支造成影响。也方便在不同的电脑中写作。</p><h3 id="未来迭代"><a href="#未来迭代" class="headerlink" title="未来迭代"></a>未来迭代</h3><p><strong>Hexo + GitHub + Typora</strong> 三者合一，用 MarkDown 语法随心所欲地写作，简直无懈可击，除了那死慢的 GitHub 令人恶心之外。还有无数可定制化的主题，可以满足很多天马行空的想象了。</p><p>至今还在实习期，闲下来的时间不多，技术功底也不是很强悍。在短期内这个作品处于 <code>DoubleYao 1.0</code>阶段。</p><p><strong>后期规划： DoubleYao 2.0</strong></p><blockquote><ul><li>独立设计，全新的 UI 界面和交互方式</li><li>随着文章数量的增多，增加 tags 标签和分类</li><li>模块：技术 + 随笔 + 手册 + 工具</li></ul></blockquote><p>余生慢慢打磨。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 里程碑 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/11/hello-world/"/>
      <url>/2019/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 里程碑 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
